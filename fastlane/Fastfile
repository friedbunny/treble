# Customise this file, documentation can be found here:
# https://github.com/fastlane/fastlane/tree/master/fastlane/docs
# All available actions: https://docs.fastlane.tools/actions
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# If you want to automatically update fastlane if a new version is available:
# update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version "2.84.0"

default_platform :ios

platform :ios do
  before_all do
    # ENV["SLACK_URL"] = "https://hooks.slack.com/services/..."
  end

  desc "Runs all the tests"
  lane :test do
    cocoapods()
    scan
  end

  desc "Update dependencies, then stage any changes."
  lane :update_dependencies do
    puts `bundle update`
    update_fastlane()
    git_add(path: ["./Gemfile.lock"])
  end

  desc "Update maps SDK to latest version, then commit changes."
  lane :update_maps_sdk do
    new_version = nil
    puts "Fetching latest maps SDK version from website"
    fastlane_require "open-uri"
    open("https://www.mapbox.com/ios-sdk/Mapbox-iOS-SDK.json") { |file|
      version_json = JSON.parse(file.read)
        .collect { |v| v.first }
        .sort_by { |v| Gem::Version.new(v) }
        .reverse
      new_version = version_json.first
      puts "Latest maps SDK version on website: #{new_version}"
    }

    podfile = "#{ENV['PWD']}/Podfile"
    podfile_text = File.read(podfile)
    version_regex = /@MAPS_SDK_VERSION = '(.+)'/
    current_version = podfile_text.match(version_regex).captures.last
    puts "Currently installed maps SDK version: #{current_version}"
    if Gem::Version.new(new_version) > Gem::Version.new(current_version)
      updated_podfile_text = podfile_text.gsub(version_regex, "@MAPS_SDK_VERSION = '#{new_version}'")
      File.open(podfile, "w") { |f| f.write(updated_podfile_text) }
      puts "Podfile updated to Mapbox-iOS-SDK #{new_version} ✅"
      cocoapods()
      git_commit(path: ["./Podfile*"], message: "Mapbox Maps SDK for iOS #{new_version}")
    else
      UI.important("Latest maps SDK version (#{new_version}) is not newer than currently installed version (#{current_version}) — skipping update.")
    end
  end

  desc "Increment build number based on current TestFlight build number."
  desc "Commits the changes, but does not push them to any remote."
  lane :bump_build_number do
    increment_build_number(build_number: latest_testflight_build_number + 1)
    version = get_version_number()
    build = get_build_number()
    commit_version_bump(message: "#{version} (#{build})", force: true)
  end

  desc "Prepare a release — bump the build number and update dependencies."
  lane :prepare do
    update_dependencies
    bump_build_number
  end

  desc "Build and submit a new beta build to Apple TestFlight."
  desc "Use `beta` if you want to run this manually."
  lane :build_and_submit do
    cocoapods(use_bundle_exec: true)
    match(readonly: true)
    gym(scheme: "App Store", include_bitcode: true)
    pilot(changelog: release_notes, wait_for_uploaded_build: true, distribute_external: true)
  end

  desc "Push current branch and create a GitHub pull request."
  lane :github_pull_request do
    push_to_git_remote(tags: false)
    create_pull_request(
      repo: "mapbox/treble",
      title: "Release #{get_version_number()} (#{get_build_number()}) with Mapbox Maps SDK #{mapbox_sdk_version}",
      api_token: ENV["GITHUB_TOKEN"]
    )
  end

  desc "Create a GitHub release."
  lane :github_release do
    version = get_version_number()
    build = get_build_number()
    set_github_release(
      repository_name: "mapbox/treble",
      tag_name: "#{version}v#{build}",
      name: "#{version} (#{build})",
      description: changelog_from_git_commits(between: [last_git_tag, "HEAD~1"], pretty: "- %s."),
      is_draft: true,
      api_token: ENV["GITHUB_TOKEN"]
    )
  end

  desc "Get current Mapbox Maps SDK for iOS version number from framework."
  private_lane :mapbox_sdk_version do
    # Get maps SDK version number, but convert it to an XML plist first.
    mapbox_plist_path = Dir.glob("#{ENV['PWD']}/**/Mapbox.framework/Info.plist").first
    `plutil -convert xml1 #{mapbox_plist_path}`
    version = get_info_plist_value(path: mapbox_plist_path, key: "MGLSemanticVersionString")
    "#{version}"
  end

  desc "Generate release notes."
  lane :release_notes do
    changelog = changelog_from_git_commits(commits_count: 5, pretty: "- %s. (%cd)", date_format: "short", quiet: true)
    "Maps SDK version: #{mapbox_sdk_version}\n\nRecent Commits\n#{changelog}"
  end

  desc "Bump the version and dependencies, then build and submit a new beta build to Apple TestFlight."
  lane :beta do
    prepare
    build_and_submit
  end

  desc "For CI: build and submit a new beta build to Apple TestFlight."
  desc "Use `prepare` and then make a new release on GitHub to trigger this command."
  lane :beta_ci do
    build_and_submit
  end

  desc "The whole kit and kaboodle."
  lane :release do
    prepare
    build_and_submit
    github_pull_request
    github_release
  end

  desc "Bump to latest maps SDK version before releasing."
  lane :release_bump do
    update_maps_sdk
    release
  end

  desc "Download dSYMs from iTunesConnect and upload them to Crashlytics."
  lane :refresh_dsyms do
    download_dsyms
    crashlytics_api_key = get_info_plist_value(path: "treble/APIKeys.plist", key: "Crashlytics API Key")
    upload_symbols_to_crashlytics(api_token: crashlytics_api_key)
    clean_build_artifacts # Delete the local dSYM files
  end

  after_all do |lane|
    # This block is called, only if the executed lane was successful

    # slack(
    #   message: "Successfully deployed new App Update."
    # )
  end

  error do |lane, exception|
    # slack(
    #   message: exception.message,
    #   success: false
    # )
  end
end


# More information about multiple platforms in fastlane: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Platforms.md
# All available actions: https://docs.fastlane.tools/actions

# fastlane reports which actions are used
# No personal data is recorded. Learn more at https://github.com/fastlane/enhancer
opt_out_usage
