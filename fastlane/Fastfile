# Customise this file, documentation can be found here:
# https://github.com/fastlane/fastlane/tree/master/fastlane/docs
# All available actions: https://docs.fastlane.tools/actions
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# If you want to automatically update fastlane if a new version is available:
# update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version "2.84.0"

default_platform :ios

platform :ios do
  before_all do
    # ENV["SLACK_URL"] = "https://hooks.slack.com/services/..."
  end

  desc "Runs all the tests"
  lane :test do
    cocoapods(use_bundle_exec: true)
    scan
  end

  desc "Update dependencies, then stage any changes."
  lane :update_dependencies do
    puts `bundle update`
    update_fastlane()
    git_add(path: ["./Gemfile.lock"])
  end

  desc "Increment build number based on current TestFlight build number."
  desc "Commits the changes, but does not push them to any remote."
  lane :bump_build_number do
    increment_build_number(build_number: latest_testflight_build_number + 1)
    version = get_version_number()
    build = get_build_number()
    commit_version_bump(message: "#{version} (#{build})", force: true)
  end

  desc "Prepare a release â€” bump the build number and update dependencies."
  lane :prepare do
    update_dependencies
    bump_build_number
  end

  desc "Build and submit a new beta build to Apple TestFlight."
  desc "Use `beta` if you want to run this manually."
  lane :build_and_submit do
    cocoapods(use_bundle_exec: true)
    match(readonly: true)
    gym(scheme: "App Store", include_bitcode: true)
    pilot(skip_waiting_for_build_processing: true)
  end

  desc "Manually bump the version and dependencies, then build and submit a new beta build to Apple TestFlight."
  lane :beta do
    prepare
    build_and_submit
  end

  desc "For CI: build and submit a new beta build to Apple TestFlight."
  desc "Use `prepare` and then make a new release on GitHub to trigger this command."
  lane :beta_ci do
    build_and_submit
  end

  desc "Download dSYMs from iTunesConnect and upload them to Crashlytics."
  lane :refresh_dsyms do
    download_dsyms
    crashlytics_api_key = get_info_plist_value(path: "treble/APIKeys.plist", key: "Crashlytics API Key")
    upload_symbols_to_crashlytics(api_token: crashlytics_api_key)
    clean_build_artifacts # Delete the local dSYM files
  end

  after_all do |lane|
    # This block is called, only if the executed lane was successful

    # slack(
    #   message: "Successfully deployed new App Update."
    # )
  end

  error do |lane, exception|
    # slack(
    #   message: exception.message,
    #   success: false
    # )
  end
end


# More information about multiple platforms in fastlane: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Platforms.md
# All available actions: https://docs.fastlane.tools/actions

# fastlane reports which actions are used
# No personal data is recorded. Learn more at https://github.com/fastlane/enhancer
opt_out_usage
